name: Quicktest

on:
  # Run on pushes, including merges, to all branches except `master` and `develop`.
  push:
    branches-ignore:
      - master
      - develop
    paths-ignore:
      - '**.md'
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  #### QUICK TEST STAGE ####
  # This is a much quicker test which only runs the unit tests and linting against the low/high
  # supported PHP/PHPCS combinations.
  # These are basically the same builds as in the Test->Coverage workflow, but then without doing
  # the code-coverage.
  quicktest:
    runs-on: ubuntu-latest

    env:
      # - COMPOSER_ROOT_VERSION is needed to get round the recursive dependency when using CI.
      COMPOSER_ROOT_VERSION: '10.99.99'

    strategy:
      matrix:
        php: ['5.4', 'latest']
        phpcs_version: ['lowest', 'dev-master']

    name: "QTest${{ matrix.phpcs_version == 'dev-master' && ' + Lint' || '' }}: PHP ${{ matrix.php }} - PHPCS ${{ matrix.phpcs_version }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # On stable PHPCS versions, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [ "${{ matrix.phpcs_version }}" != "dev-master" ]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On, zend.assertions=1' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On, zend.assertions=1' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: none

      - name: "Composer: set PHPCS version for tests (master)"
        if: ${{ matrix.phpcs_version != 'lowest' }}
        run: composer require squizlabs/php_codesniffer:"${{ matrix.phpcs_version }}" --no-update --no-scripts --no-interaction

      - name: Enable creation of `composer.lock` file
        if: ${{ matrix.phpcs_version == 'lowest' }}
        run: composer config --unset lock

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-php-dependencies-with-composer
      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v3"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: "Composer: set PHPCS version for tests (lowest)"
        if: ${{ matrix.phpcs_version == 'lowest' }}
        run: composer update squizlabs/php_codesniffer phpcsstandards/phpcsutils --prefer-lowest --no-scripts --no-interaction

      - name: Lint against parse errors
        if: ${{ matrix.phpcs_version == 'dev-master' }}
        run: composer lint

      - name: Grab PHPUnit version
        id: phpunit_version
        run: echo "VERSION=$(vendor/bin/phpunit --version | grep --only-matching --max-count=1 --extended-regexp '\b[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT

      - name: Run the unit tests (PHPUnit < 10)
        if: ${{ ! startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}
        run: vendor/bin/phpunit --no-coverage

      - name: Run the unit tests (PHPUnit 10+)
        if: ${{ startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}
        run: vendor/bin/phpunit -c phpunit10.xml.dist --no-coverage
