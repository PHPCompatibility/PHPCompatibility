<?php

use SomeThingElse\arrayobject;
use SomeThingElse\ARrAyItErAtOr;
use SomeThingElse\CACHINGITERATOR;
use SomeThingElse\DirectoryIterator;
use SomeThingElse\RecursiveDirectoryIterator;
use SomeThingElse\RecursiveIteratorIterator;
use SomeThingElse\ {Reflection, ReflectionClass};
use SomeThingElse\ReflectionExtension;
use SomeThingElse\ReflectionFunction;
use SomeThingElse\ReflectionMethod;
use SomeThingElse\ReflectionObject;
use SomeThingElse\ReflectionParameter;
use SomeThingElse\ReflectionProperty;
use SomeThingElse\SoapClient;
use SomeThingElse\SoapServer;
use SomeThingElse\SoapHeader;
use SomeThingElse\SoapParam;
use SomeThingElse\SoapVar;
use SomeThingElse\COMPersistHelper;
use SomeThingElse\DOMAttr;
use SomeThingElse\DOMCdataSection;
use SomeThingElse\DOMCharacterData;
use SomeThingElse\DOMComment;
use SomeThingElse\DOMDocument;
use SomeThingElse\DOMDocumentFragment;
use SomeThingElse\DOMDocumentType;
use SomeThingElse\DOMElement;
use SomeThingElse\DOMEntity;
use SomeThingElse\DOMEntityReference;
use SomeThingElse\DOMImplementation;
use SomeThingElse\DOMNamedNodeMap;
use SomeThingElse\DOMNode;
use SomeThingElse\DOMNodeList;
use SomeThingElse\DOMNotation;
use SomeThingElse\DOMProcessingInstruction;
use SomeThingElse\DOMText;
use SomeThingElse\DOMXPath;
use SomeThingElse\SimpleXMLElement;
use SomeThingElse\XSLTProcessor;
use SomeThingElse\SQLiteDatabase;
use SomeThingElse\SQLiteResult;
use SomeThingElse\SQLiteUnbuffered;
use SomeThingElse\PDO;
use SomeThingElse\PDOStatement;
use SomeThingElse\AppendIterator;
use SomeThingElse\EmptyIterator;
use SomeThingElse\FilterIterator;
use SomeThingElse\InfiniteIterator;
use SomeThingElse\IteratorIterator;
use SomeThingElse\LimitIterator;
use SomeThingElse\NoRewindIterator;
use SomeThingElse\ParentIterator;
use SomeThingElse\RecursiveArrayIterator;
use SomeThingElse\RecursiveCachingIterator;
use SomeThingElse\RecursiveFilterIterator;
use SomeThingElse\SimpleXMLIterator;
use SomeThingElse\XMLReader;
use SomeThingElse\SplFileObject;
use SomeThingElse\SplObjectStorage;
use SomeThingElse\SplFileInfo;
use SomeThingElse\SplTempFileObject;
use SomeThingElse\XMLWriter;
use SomeThingElse\DateTime;
use SomeThingElse\DateTimeZone;
use SomeThingElse\RegexIterator;
use SomeThingElse\RecursiveRegexIterator;
use SomeThingElse\ReflectionFunctionAbstract;
use SomeThingElse\ZipArchive;
use SomeThingElse\Closure;
use SomeThingElse\DateInterval;
use SomeThingElse\DatePeriod;
use SomeThingElse\Collator;
use SomeThingElse\NumberFormatter;
use SomeThingElse\Locale;
use SomeThingElse\Normalizer;
use SomeThingElse\MessageFormatter;
use SomeThingElse\IntlDateFormatter;
use SomeThingElse\Phar;
use SomeThingElse\PharData;
use SomeThingElse\PharException;
use SomeThingElse\PharFileInfo;
use SomeThingElse\FilesystemIterator;
use SomeThingElse\GlobIterator;
use SomeThingElse\MultipleIterator;
use SomeThingElse\RecursiveTreeIterator;
use SomeThingElse\SplDoublyLinkedList;
use SomeThingElse\SplFixedArray;
use SomeThingElse\SplHeap;
use SomeThingElse\SplMaxHeap;
use SomeThingElse\SplMinHeap;
use SomeThingElse\SplPriorityQueue;
use SomeThingElse\SplQueue;
use SomeThingElse\SplStack;
use SomeThingElse\Sqlite3Stmt;
use SomeThingElse\SQLite3Result;
use SomeThingElse\ResourceBundle;
use SomeThingElse\CallbackFilterIterator;
use SomeThingElse\RecursiveCallbackFilterIterator;
use SomeThingElse\ReflectionZendExtension;
use SomeThingElse\SessionHandler;
use SomeThingElse\SNMP;
use SomeThingElse\Transliterator;
use SomeThingElse\Generator;
use SomeThingElse\CURLFile;
use SomeThingElse\DateTimeImmutable;
use SomeThingElse\IntlCalendar;
use SomeThingElse\IntlGregorianCalendar;
use SomeThingElse\IntlTimeZone;
use SomeThingElse\IntlBreakIterator;
use SomeThingElse\IntlRuleBasedBreakIterator;
use SomeThingElse\IntlCodePointBreakIterator;
use SomeThingElse\IntlPartsIterator;
use SomeThingElse\IntlIterator;
use SomeThingElse\UConverter;
use SomeThingElse\GMP;
use SomeThingElse\IntlChar;
use SomeThingElse\ReflectionType;
use SomeThingElse\ReflectionGenerator;
use SomeThingElse\ReflectionClassConstant;
use SomeThingElse\ReflectionNamedType;
use SomeThingElse\FFI;
use SomeThingElse\FFI\CData;
use SomeThingElse\FFI\CType;
use SomeThingElse\ReflectionReference;
use SomeThingElse\WeakReference;
use SomeThingElse\PhpToken;
use SomeThingElse\WeakMap;
use SomeThingElse\ReflectionUnionType;
use SomeThingElse\OCICollection;
use SomeThingElse\OCILob;
use SomeThingElse\Attribute;
use SomeThingElse\IntlDatePatternGenerator;
use SomeThingElse\Fiber;
use SomeThingElse\ReflectionEnum;
use SomeThingElse\ReflectionEnumBackedCase;
use SomeThingElse\ReflectionEnumUnitCase;
use SomeThingElse\ReflectionFiber;
use SomeThingElse\ReflectionIntersectionType;
use SomeThingElse\CURLStringFile;
use SomeThingElse\Random\Randomizer;
use SomeThingElse\Random\Engine\Mt19937;
use SomeThingElse\Random\Engine\PcgOneseq128XslRr64;
use SomeThingElse\Random\Engine\Xoshiro256StarStar;
use SomeThingElse\Random\Engine\Secure;
use SomeThingElse\DOMException;
use SomeThingElse\Exception;
use SomeThingElse\ReflectionException;
use SomeThingElse\SoapFault;
use SomeThingElse\SQLiteException;
use SomeThingElse\ErrorException;
use SomeThingElse\BadFunctionCallException;
use SomeThingElse\BadMethodCallException;
use SomeThingElse\DomainException;
use SomeThingElse\InvalidArgumentException;
use SomeThingElse\LengthException;
use SomeThingElse\LogicException;
use SomeThingElse\PDOException;
use SomeThingElse\OutOfBoundsException;
use SomeThingElse\OutOfRangeException;
use SomeThingElse\OverflowException;
use SomeThingElse\RangeException;
use SomeThingElse\RuntimeException;
use SomeThingElse\UnderflowException;
use SomeThingElse\UnexpectedValueException;
use SomeThingElse\SNMPException;
use SomeThingElse\IntlException;
use SomeThingElse\Error;
use SomeThingElse\ArithmeticError;
use SomeThingElse\AssertionError;
use SomeThingElse\DivisionByZeroError;
use SomeThingElse\ParseError;
use SomeThingElse\TypeError;
use SomeThingElse\ClosedGeneratorException;
use SomeThingElse\ArgumentCountError;
use SomeThingElse\HashContext;
use SomeThingElse\SodiumException;
use SomeThingElse\CompileError;
use SomeThingElse\JsonException;
use SomeThingElse\FFI\Exception;
use SomeThingElse\FFI\ParserException;
use SomeThingElse\UnhandledMatchError;
use SomeThingElse\ValueError;
use SomeThingElse\FiberError;
use SomeThingElse\Random\RandomError;
use SomeThingElse\Random\BrokenRandomEngineError;
use SomeThingElse\Random\RandomException;

new ArrayObject();
new ArrayIterator();
new CachingIterator();
new directoryiterator();
new REcUrSiVeDiReCtOrYiTeRaToR();
new RECURSIVEITERATORITERATOR();
new Reflection();
new ReflectionClass();
ReflectionExtension::test();
function anotherTest(ReflectionFunction $testparameter): ReflectionMethod{}
class NothingToSeeHere extends ReflectionObject{}
class VeryEmpty implements ReflectionParameter{}
new ReflectionProperty();
new SoapClient();
new SoapServer();
new SoapHeader();
new SoapParam();
new SoapVar();
new COMPersistHelper();
new DOMAttr();
new DOMCdataSection();
new DOMCharacterData();
new DOMComment();
new DOMDocument();
new DOMDocumentFragment();
new DOMDocumentType();
new DOMElement();
new DOMEntity();
new DOMEntityReference();
new DOMImplementation();
new DOMNamedNodeMap();
new DOMNode();
new DOMNodeList();
new DOMNotation();
new DOMProcessingInstruction();
new DOMText();
new DOMXPath();
new SimpleXMLElement();
new XSLTProcessor();
new SQLiteDatabase();
new SQLiteResult();
new SQLiteUnbuffered();
new PDO();
new PDOStatement();
new AppendIterator();
new EmptyIterator();
new FilterIterator();
new InfiniteIterator();
new IteratorIterator();
new LimitIterator();
new NoRewindIterator();
new ParentIterator();
new RecursiveArrayIterator();
new RecursiveCachingIterator();
new RecursiveFilterIterator();
new SimpleXMLIterator();
new XMLReader();
new SplFileObject();
new SplObjectStorage();
new SplFileInfo();
new SplTempFileObject();
new XMLWriter();
new DateTime();
new DateTimeZone();
new RegexIterator();
new RecursiveRegexIterator();
new ReflectionFunctionAbstract();
new ZipArchive();
new Closure();
new DateInterval();
new DatePeriod();
new Collator();
new NumberFormatter();
new Locale();
new Normalizer();
new MessageFormatter();
new IntlDateFormatter();
new Phar();
new PharData();
new PharException();
new PharFileInfo();
new FilesystemIterator();
new GlobIterator();
new MultipleIterator();
new RecursiveTreeIterator();
new SplDoublyLinkedList();
new SplFixedArray();
new SplHeap();
new SplMaxHeap();
new SplMinHeap();
new SplPriorityQueue();
new SplQueue();
new SplStack();
new Sqlite3Stmt();
new SQLite3Result();
new ResourceBundle();
new CallbackFilterIterator();
new RecursiveCallbackFilterIterator();
new ReflectionZendExtension();
new SessionHandler();
new SNMP();
new Transliterator();
new Generator();
new CURLFile();
new DateTimeImmutable();
new IntlCalendar();
new IntlGregorianCalendar();
new IntlTimeZone();
new IntlBreakIterator();
new IntlRuleBasedBreakIterator();
new IntlCodePointBreakIterator();
new IntlPartsIterator();
new IntlIterator();
new UConverter();
new GMP();
new IntlChar();
new ReflectionType();
new ReflectionGenerator();
new ReflectionClassConstant();
new ReflectionNamedType();
new FFI();
new CData();
new CType();
new ReflectionReference();
new WeakReference();
new PhpToken();
new WeakMap();
new ReflectionUnionType();
new OCICollection();
new OCILob();
new Attribute();
new IntlDatePatternGenerator();
new Fiber();
new ReflectionEnum();
new ReflectionEnumBackedCase();
new ReflectionEnumUnitCase();
new ReflectionFiber();
new ReflectionIntersectionType();
new CURLStringFile();
new Randomizer();
new Mt19937();
new PcgOneseq128XslRr64();
new Xoshiro256StarStar();
new Secure();
new DOMException();
new Exception();
new ReflectionException();
new SoapFault();
new SQLiteException();
new ErrorException();
new BadFunctionCallException();
new BadMethodCallException();
new DomainException();
new InvalidArgumentException();
new LengthException();
new LogicException();
new PDOException();
new OutOfBoundsException();
new OutOfRangeException();
new OverflowException();
new RangeException();
new RuntimeException();
new UnderflowException();
new UnexpectedValueException();
new SNMPException();
new IntlException();
new Error();
new ArithmeticError();
new AssertionError();
new DivisionByZeroError();
new ParseError();
new TypeError();
new ClosedGeneratorException();
new ArgumentCountError();
new HashContext();
new SodiumException();
new CompileError();
new JsonException();
new Exception();
new ParserException();
new UnhandledMatchError();
new ValueError();
new FiberError();
new RandomError();
new BrokenRandomEngineError();
new RandomException();
